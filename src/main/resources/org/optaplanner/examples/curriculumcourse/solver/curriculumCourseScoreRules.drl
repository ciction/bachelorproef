/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.curriculumcourse.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.curriculumcourse.domain.Course;
import org.optaplanner.examples.curriculumcourse.domain.Curriculum;
import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;
import org.optaplanner.examples.curriculumcourse.domain.Day;
import org.optaplanner.examples.curriculumcourse.domain.Lecture;
import org.optaplanner.examples.curriculumcourse.domain.Period;
import org.optaplanner.examples.curriculumcourse.domain.Room;
import org.optaplanner.examples.curriculumcourse.domain.Teacher;
import org.optaplanner.examples.curriculumcourse.domain.Timeslot;
import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;
import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;


//christophe
//----------------
import  org.optaplanner.examples.curriculumcourse.domain.My_messageClass;
//----------------


global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// Lectures: A missing or extra lecture of a course.
// This hard constraint is build-in: the correct number of Lecture's is created

// Conflicts: Two conflicting lectures in the same period.
// Three conflicting lectures count as 3 violations: one for each pair.
rule "conflictingLecturesDifferentCourseInSamePeriod"
    when
        $courseConflict : CourseConflict($leftCourse : leftCourse, $rightCourse : rightCourse)
        $leftLecture : Lecture(course == $leftCourse, $period : period, period != null)
        $rightLecture : Lecture(course == $rightCourse, period == $period, this != $leftLecture)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $courseConflict.getConflictCount());
end
rule "conflictingLecturesSameCourseInSamePeriod"
    when
        Lecture($leftId : id, $leftCourse : course, $period : period, period != null)
        Lecture(course == $leftCourse, period == $period, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - (1 + $leftCourse.getCurriculumList().size()));
end

// RoomOccupancy: Two lectures in the same room at the same period.
// Any extra lecture in the same period and room counts as one more violation.
rule "roomOccupancy"
    when
        Lecture($leftId : id, period != null, $period : period, room != null, $room : room)
        // $leftLecture has lowest id of the period+room combo
        not Lecture(period == $period, room == $room, id < $leftId)
        // rightLecture has the same period
        Lecture(period == $period, room == $room, id > $leftId, $rightId : id)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Availabilities: Each lecture in a period unavailable for that course.
rule "unavailablePeriodPenalty"
    when
        UnavailablePeriodPenalty($course : course, $period : period)
        Lecture(course == $course, period == $period)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
// Soft constraints
// ############################################################################

// RoomCapacity: For each lecture, the number of students that attend the course should be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $room : Room($capacity : capacity)
        Lecture(room == $room, studentSize > $capacity, $studentSize : studentSize)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($capacity - $studentSize));
end

// MinimumWorkingDays: The lectures of each course should be spread into a minimum number of days.
// Each day below the minimum counts as 5 points of penalty.
rule "minimumWorkingDays"
    when
        $course : Course($minWorkingDaySize : minWorkingDaySize)
        $dayCount : Number(intValue < $minWorkingDaySize) from accumulate(
            $day : Day()
            and exists Lecture(course == $course, day == $day),
            count($day)
        )
        // An uninitialized schedule should have no constraints broken
        exists Lecture(course == $course, period != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, (($dayCount.intValue() - $minWorkingDaySize) * 5));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
// Each isolated lecture in a curriculum counts as 2 points of penalty.
rule "curriculumCompactness"
    when
        $curriculum : Curriculum()

        Lecture(curriculumList contains $curriculum,
            $day : day, $timeslotIndex : timeslotIndex, period != null
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex - 1)
        )
        not Lecture(curriculumList contains $curriculum,
            day == $day, timeslotIndex == ($timeslotIndex + 1)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -2);
end



//christophe
//----------------
//CUSTOM RULES TESTING
//------------------------------------------------------------------------------------------------------------------------------------

//testrule1
//---------------
// wanneer een course de naam ABAP_Objects draagt --> -100 hard

//    rule "testrule1"
//        when
//            $course : Course(code == "ABAP_Objects")
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -100);
//    end



//testrule2
//---------------
// ABAP MAG NIET plaatsvinden op de eerste dag (dag 0)  veranderen via een modulo voor elke maandag
//    rule "testrule2"
//        when
//            $course : Course(code == "ABAP_Objects")
//            $day: Day(dayIndex == 0)
//            Lecture(course == $course, day == $day , period != null)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -1);
//            My_messageClass.writeMessage("abap cannot be placed on monday");
//
//    end


//    //geen abap in de voormiddag WORKING
//    //--------------------------------------
//    rule "geenAbapInVoormiddag"
//        when
//            // code = naam van het vak
//            $course : Course(courseType == "ABAP_Objects_WK")
//
//            //{"08:00", "09:00", "10:00", "11:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"};
//            //eerste 4 lesuren geen abap
//            Lecture(course == $course, timeslotIndex < 4 )
//        then
//            scoreHolder.addSoftConstraintMatch(kcontext, -1);
//    end
//    //--------------------------------------


//geen Werkcolleges in de voormiddag WORKING
//--------------------------------------
rule "geenWerkCollegesIndeVoormiddag"
    when
        // code = naam van het vak
        $course : Course(courseType == CourseType.Werkcollege)
        //{"08:00", "09:00", "10:00", "11:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"};
        //eerste 4 lesuren geen abap
        Lecture(course == $course, timeslotIndex < 4 )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
//--------------------------------------


//testrule3
//---------------
//// ABAP MAG NIET plaatsvinden op maandagen (modulo)
////  0	1	2	3	4	5	6
////  ma	di	wo	do	vr	za	zo
//// dag modulo 6 --> weekdag
//    rule "geenAbapOpMaandag"
//        when
//            $course : Course(code == "ABAP_Objects")
//            $day: Day((dayIndex % 7) == 1)
//            Lecture(course == $course, day == $day , period != null)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -10);
//            My_messageClass.writeMessage("abap cannot be placed on monday");
//
//    end



//---------------
//// TEST -  geen lessen op maandag
//    rule "geenLessenOpMaandag"
//        when
//            $day: Day(dayIndex  == 0)
//            Lecture(day == $day)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -10);
//
//
//    end
//// TEST -  geen lessen op woensdag
//    rule "geenLessenOpWoensdag"
//        when
//            $day: Day(dayIndex  == 2)
//            Lecture(day == $day)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -10);
//
//
//    end

//testrule4
//---------------
// ABAP MAG NIET plaatsvinden op de eerste dag of de 2e dag
//    rule "testrule4"
//        when
//            $course : Course(code == "ABAP_Objects")
//            $day0: Day(dayIndex == 0)
////            $day1: Day(dayIndex == 1)
////            Lecture(course == $course, day == $day1 , period != null)
//            Lecture(course == $course, day == $day0 , period != null)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -100);
//    end

//lecutures van zelfde curriculum (uit de getCurriculumList) en van hetzelfde vak liefst in blokken van 3 uur geven
//rule "Lecture_curriculum_Course_blocks_per3"
//    when
//        $curriculum : Curriculum()
//
//        Lecture(curriculumList contains $curriculum,
//            $day : day, $timeslotIndex : timeslotIndex, period != null
//        )
//        not Lecture(curriculumList contains $curriculum,
//            day == $day, timeslotIndex == ($timeslotIndex - 1)
//        )
//        not Lecture(curriculumList contains $curriculum,
//            day == $day, timeslotIndex == ($timeslotIndex + 1)
//        )
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, -2);
//end



//END OF CUSTOM RULES TESTING
//------------------------------------------------------------------------------------------------------------------------------------

// RoomStability: All lectures of a course should be given in the same room.
// Each distinct room used for the lectures of a course, but the first, counts as 1 point of penalty.
rule "roomStability"
    when
        $course : Course()
        $roomCount : Number(intValue > 1) from accumulate(
            $room : Room()
            and exists Lecture(course == $course, room == $room),
            count($room)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -($roomCount.intValue() - 1));
end
