/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.curriculumcourse.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.curriculumcourse.domain.Course;
import org.optaplanner.examples.curriculumcourse.domain.Curriculum;
import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;
import org.optaplanner.examples.curriculumcourse.domain.Day;
import org.optaplanner.examples.curriculumcourse.domain.Lecture;
import org.optaplanner.examples.curriculumcourse.domain.Period;
import org.optaplanner.examples.curriculumcourse.domain.Room;
import org.optaplanner.examples.curriculumcourse.domain.Teacher;
import org.optaplanner.examples.curriculumcourse.domain.Timeslot;
import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;
import org.optaplanner.examples.curriculumcourse.domain.UnavailableDay;
import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodAllCourses;
import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;

//EHB utilitis
//----------------
import  org.optaplanner.examples.curriculumcourse.domain.My_messageClass;
import java.util.ArrayList
import java.util.HashMap
import javassist.compiler.Lex

//----------------

global HardSoftScoreHolder scoreHolder;



// ############################################################################
// TEST RULES tutorial
// ############################################################################
//Test 1
// wanneer een course de naam ABAP_Objects draagt --> -100 hard
rule "testrule1"
    when
        $course : Course(code == "ABAP_Objects")
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end


//---------------
//// TEST -  geen lessen op maandag
//    rule "geenLessenOpMaandag"
//        when
//            $day: Day(dayIndex  == 0)
//            Lecture(day == $day)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -10);
//
//
//    end
//// TEST -  geen lessen op woensdag
//    rule "geenLessenOpWoensdag"
//        when
//            $day: Day(dayIndex  == 2)
//            Lecture(day == $day)
//        then
//            scoreHolder.addHardConstraintMatch(kcontext, -10);
//
//
//    end


//Test 2
//---------------
// ABAP MAG NIET plaatsvinden op de eerste dag (dag 0)
// Verander dit naareen modulo om elke maandag geen abap te plannen
rule "testrule2"
    when
        $course : Course(code == "ABAP_Objects")
        $day: Day(dayIndex == 0)
        Lecture(course == $course, day == $day , period != null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
        My_messageClass.writeMessage("abap cannot be placed on monday");

end

//Test 3 ( PERFECT WERKDENDE RULE )
//geen ABAP in de voormiddag
rule "geenAbapInVoormiddag"
    when
        // code = naam van het vak
        $course : Course(courseType == "ABAP_Objects_WK")
        //{"08:00", "09:00", "10:00", "11:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"};
        //eerste 4 lesuren geen abap
        Lecture(course == $course, timeslotIndex < 4 )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

//Test 4
// ABAP MAG NIET plaatsvinden op de eerste dag of de 2e dag
// onderzoek naar een or of NOT IN operator ==> anders kan de regel niet werken
    rule "testrule4"
        when
            $course : Course(code == "ABAP_Objects")
            $day0: Day(dayIndex == 0)
            $day1: Day(dayIndex == 1)
//            Lecture(course == $course, day == $day1 , period != null)
//            Lecture(course == $course, day == $day0 , period != null)
        then
            scoreHolder.addHardConstraintMatch(kcontext, -100);
    end
// =========================
// //https://docs.jboss.org/drools/release/5.2.0.CR1/drools-expert-docs/html/ch05.html
// Example 5.54. Multi Restriction
/*
        // Simple multi restriction using a single &&
        Person( age > 30 && < 40 )
        // Complex multi restriction using groupings of multi restrictions
        Person( age ( (> 30 && < 40) ||
                      (> 20 && < 25) ) )
        // Mixing muti restrictions with constraint connectives
        Person( age > 30 && < 40 || location == "london" )
*/
// =========================



// ############################################################################
// DEBUGGING RULES
// ############################################################################

//rule voor student size te testen van elke course (debugging)
rule "DebugCourseStudentSize"
     when
          $room : Room($pcCount : pcCount)
          Lecture(room == $room, $course: course, $studentSize : studentSize )
      then
        System.out.println("$course = " + $course);
        System.out.println("\t studentSize = " + $studentSize);
end




